{"ast":null,"code":"const reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId);\n  let b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    let aa = a.shift();\n    let bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId);\n  let b = getRowValueByColumnID(rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId);\n  let b = getRowValueByColumnID(rowB, columnId);\n  return compareBasic(a, b);\n} // Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/ankomah/Desktop/AFI_CONNECT/front_end/node_modules/react-table/src/sortTypes.js"],"names":["reSplitAlphaNumeric","alphanumeric","rowA","rowB","columnId","a","getRowValueByColumnID","b","toString","split","filter","Boolean","length","aa","shift","bb","an","parseInt","bn","combo","sort","isNaN","datetime","getTime","compareBasic","basic","row","values","Infinity","String"],"mappings":"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","sourcesContent":["const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n"]},"metadata":{},"sourceType":"module"}