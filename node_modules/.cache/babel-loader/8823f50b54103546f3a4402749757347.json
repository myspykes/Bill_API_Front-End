{"ast":null,"code":"import React from 'react';\nimport { actions, functionalUpdate, useMountedLayoutEffect, useGetLatest } from '../publicUtils';\n\nconst defaultInitialRowStateAccessor = originalRow => ({});\n\nconst defaultInitialCellStateAccessor = originalRow => ({}); // Actions\n\n\nactions.setRowState = 'setRowState';\nactions.setCellState = 'setCellState';\nactions.resetRowState = 'resetRowState';\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\nuseRowState.pluginName = 'useRowState';\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById\n  } = instance;\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetRowState) {\n    return { ...state,\n      rowState: instance.initialState.rowState || {}\n    };\n  }\n\n  if (action.type === actions.setRowState) {\n    const {\n      rowId,\n      value\n    } = action;\n    const oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId].original);\n    return { ...state,\n      rowState: { ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState)\n      }\n    };\n  }\n\n  if (action.type === actions.setCellState) {\n    const {\n      rowId,\n      columnId,\n      value\n    } = action;\n    const oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId].original);\n    const oldCellState = typeof oldRowState?.cellState?.[columnId] !== 'undefined' ? oldRowState.cellState[columnId] : initialCellStateAccessor(rowsById[rowId].original);\n    return { ...state,\n      rowState: { ...state.rowState,\n        [rowId]: { ...oldRowState,\n          cellState: { ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState)\n          }\n        }\n      }\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    autoResetRowState = true,\n    data,\n    dispatch\n  } = instance;\n  const setRowState = React.useCallback((rowId, value) => dispatch({\n    type: actions.setRowState,\n    rowId,\n    value\n  }), [dispatch]);\n  const setCellState = React.useCallback((rowId, columnId, value) => dispatch({\n    type: actions.setCellState,\n    rowId,\n    columnId,\n    value\n  }), [dispatch]);\n  const getAutoResetRowState = useGetLatest(autoResetRowState);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({\n        type: actions.resetRowState\n      });\n    }\n  }, [data]);\n  Object.assign(instance, {\n    setRowState,\n    setCellState\n  });\n}\n\nfunction prepareRow(row, {\n  instance\n}) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: {\n      rowState\n    }\n  } = instance;\n\n  if (row.original) {\n    row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row.original);\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater);\n    };\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {};\n      }\n\n      cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(row.original);\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater);\n      };\n    });\n  }\n}","map":{"version":3,"sources":["/Users/ankomah/Desktop/AFI_CONNECT/front_end/node_modules/react-table/src/plugin-hooks/useRowState.js"],"names":["React","actions","functionalUpdate","useMountedLayoutEffect","useGetLatest","defaultInitialRowStateAccessor","originalRow","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","hooks","stateReducers","push","reducer","useInstance","prepareRow","pluginName","state","action","previousState","instance","initialRowStateAccessor","initialCellStateAccessor","rowsById","type","init","rowState","initialState","rowId","value","oldRowState","original","columnId","oldCellState","cellState","autoResetRowState","data","dispatch","useCallback","getAutoResetRowState","Object","assign","row","id","setState","updater","cells","forEach","cell","column"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,OADF,EAEEC,gBAFF,EAGEC,sBAHF,EAIEC,YAJF,QAKO,gBALP;;AAOA,MAAMC,8BAA8B,GAAGC,WAAW,KAAK,EAAL,CAAlD;;AACA,MAAMC,+BAA+B,GAAGD,WAAW,KAAK,EAAL,CAAnD,C,CAEA;;;AACAL,OAAO,CAACO,WAAR,GAAsB,aAAtB;AACAP,OAAO,CAACQ,YAAR,GAAuB,cAAvB;AACAR,OAAO,CAACS,aAAR,GAAwB,eAAxB;AAEA,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAClCA,EAAAA,KAAK,CAACC,aAAN,CAAoBC,IAApB,CAAyBC,OAAzB;AACAH,EAAAA,KAAK,CAACI,WAAN,CAAkBF,IAAlB,CAAuBE,WAAvB;AACAJ,EAAAA,KAAK,CAACK,UAAN,CAAiBH,IAAjB,CAAsBG,UAAtB;AACD,CAJM;AAMPN,WAAW,CAACO,UAAZ,GAAyB,aAAzB;;AAEA,SAASH,OAAT,CAAiBI,KAAjB,EAAwBC,MAAxB,EAAgCC,aAAhC,EAA+CC,QAA/C,EAAyD;AACvD,QAAM;AACJC,IAAAA,uBAAuB,GAAGlB,8BADtB;AAEJmB,IAAAA,wBAAwB,GAAGjB,+BAFvB;AAGJkB,IAAAA;AAHI,MAIFH,QAJJ;;AAMA,MAAIF,MAAM,CAACM,IAAP,KAAgBzB,OAAO,CAAC0B,IAA5B,EAAkC;AAChC,WAAO;AACLC,MAAAA,QAAQ,EAAE,EADL;AAEL,SAAGT;AAFE,KAAP;AAID;;AAED,MAAIC,MAAM,CAACM,IAAP,KAAgBzB,OAAO,CAACS,aAA5B,EAA2C;AACzC,WAAO,EACL,GAAGS,KADE;AAELS,MAAAA,QAAQ,EAAEN,QAAQ,CAACO,YAAT,CAAsBD,QAAtB,IAAkC;AAFvC,KAAP;AAID;;AAED,MAAIR,MAAM,CAACM,IAAP,KAAgBzB,OAAO,CAACO,WAA5B,EAAyC;AACvC,UAAM;AAAEsB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBX,MAAzB;AAEA,UAAMY,WAAW,GACf,OAAOb,KAAK,CAACS,QAAN,CAAeE,KAAf,CAAP,KAAiC,WAAjC,GACIX,KAAK,CAACS,QAAN,CAAeE,KAAf,CADJ,GAEIP,uBAAuB,CAACE,QAAQ,CAACK,KAAD,CAAR,CAAgBG,QAAjB,CAH7B;AAKA,WAAO,EACL,GAAGd,KADE;AAELS,MAAAA,QAAQ,EAAE,EACR,GAAGT,KAAK,CAACS,QADD;AAER,SAACE,KAAD,GAAS5B,gBAAgB,CAAC6B,KAAD,EAAQC,WAAR;AAFjB;AAFL,KAAP;AAOD;;AAED,MAAIZ,MAAM,CAACM,IAAP,KAAgBzB,OAAO,CAACQ,YAA5B,EAA0C;AACxC,UAAM;AAAEqB,MAAAA,KAAF;AAASI,MAAAA,QAAT;AAAmBH,MAAAA;AAAnB,QAA6BX,MAAnC;AAEA,UAAMY,WAAW,GACf,OAAOb,KAAK,CAACS,QAAN,CAAeE,KAAf,CAAP,KAAiC,WAAjC,GACIX,KAAK,CAACS,QAAN,CAAeE,KAAf,CADJ,GAEIP,uBAAuB,CAACE,QAAQ,CAACK,KAAD,CAAR,CAAgBG,QAAjB,CAH7B;AAKA,UAAME,YAAY,GAChB,OAAOH,WAAW,EAAEI,SAAb,GAAyBF,QAAzB,CAAP,KAA8C,WAA9C,GACIF,WAAW,CAACI,SAAZ,CAAsBF,QAAtB,CADJ,GAEIV,wBAAwB,CAACC,QAAQ,CAACK,KAAD,CAAR,CAAgBG,QAAjB,CAH9B;AAKA,WAAO,EACL,GAAGd,KADE;AAELS,MAAAA,QAAQ,EAAE,EACR,GAAGT,KAAK,CAACS,QADD;AAER,SAACE,KAAD,GAAS,EACP,GAAGE,WADI;AAEPI,UAAAA,SAAS,EAAE,EACT,IAAIJ,WAAW,CAACI,SAAZ,IAAyB,EAA7B,CADS;AAET,aAACF,QAAD,GAAYhC,gBAAgB,CAAC6B,KAAD,EAAQI,YAAR;AAFnB;AAFJ;AAFD;AAFL,KAAP;AAaD;AACF;;AAED,SAASnB,WAAT,CAAqBM,QAArB,EAA+B;AAC7B,QAAM;AAAEe,IAAAA,iBAAiB,GAAG,IAAtB;AAA4BC,IAAAA,IAA5B;AAAkCC,IAAAA;AAAlC,MAA+CjB,QAArD;AAEA,QAAMd,WAAW,GAAGR,KAAK,CAACwC,WAAN,CAClB,CAACV,KAAD,EAAQC,KAAR,KACEQ,QAAQ,CAAC;AACPb,IAAAA,IAAI,EAAEzB,OAAO,CAACO,WADP;AAEPsB,IAAAA,KAFO;AAGPC,IAAAA;AAHO,GAAD,CAFQ,EAOlB,CAACQ,QAAD,CAPkB,CAApB;AAUA,QAAM9B,YAAY,GAAGT,KAAK,CAACwC,WAAN,CACnB,CAACV,KAAD,EAAQI,QAAR,EAAkBH,KAAlB,KACEQ,QAAQ,CAAC;AACPb,IAAAA,IAAI,EAAEzB,OAAO,CAACQ,YADP;AAEPqB,IAAAA,KAFO;AAGPI,IAAAA,QAHO;AAIPH,IAAAA;AAJO,GAAD,CAFS,EAQnB,CAACQ,QAAD,CARmB,CAArB;AAWA,QAAME,oBAAoB,GAAGrC,YAAY,CAACiC,iBAAD,CAAzC;AAEAlC,EAAAA,sBAAsB,CAAC,MAAM;AAC3B,QAAIsC,oBAAoB,EAAxB,EAA4B;AAC1BF,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAEzB,OAAO,CAACS;AAAhB,OAAD,CAAR;AACD;AACF,GAJqB,EAInB,CAAC4B,IAAD,CAJmB,CAAtB;AAMAI,EAAAA,MAAM,CAACC,MAAP,CAAcrB,QAAd,EAAwB;AACtBd,IAAAA,WADsB;AAEtBC,IAAAA;AAFsB,GAAxB;AAID;;AAED,SAASQ,UAAT,CAAoB2B,GAApB,EAAyB;AAAEtB,EAAAA;AAAF,CAAzB,EAAuC;AACrC,QAAM;AACJC,IAAAA,uBAAuB,GAAGlB,8BADtB;AAEJmB,IAAAA,wBAAwB,GAAGjB,+BAFvB;AAGJY,IAAAA,KAAK,EAAE;AAAES,MAAAA;AAAF;AAHH,MAIFN,QAJJ;;AAMA,MAAIsB,GAAG,CAACX,QAAR,EAAkB;AAChBW,IAAAA,GAAG,CAACzB,KAAJ,GACE,OAAOS,QAAQ,CAACgB,GAAG,CAACC,EAAL,CAAf,KAA4B,WAA5B,GACIjB,QAAQ,CAACgB,GAAG,CAACC,EAAL,CADZ,GAEItB,uBAAuB,CAACqB,GAAG,CAACX,QAAL,CAH7B;;AAKAW,IAAAA,GAAG,CAACE,QAAJ,GAAeC,OAAO,IAAI;AACxB,aAAOzB,QAAQ,CAACd,WAAT,CAAqBoC,GAAG,CAACC,EAAzB,EAA6BE,OAA7B,CAAP;AACD,KAFD;;AAIAH,IAAAA,GAAG,CAACI,KAAJ,CAAUC,OAAV,CAAkBC,IAAI,IAAI;AACxB,UAAI,CAACN,GAAG,CAACzB,KAAJ,CAAUiB,SAAf,EAA0B;AACxBQ,QAAAA,GAAG,CAACzB,KAAJ,CAAUiB,SAAV,GAAsB,EAAtB;AACD;;AAEDc,MAAAA,IAAI,CAAC/B,KAAL,GACE,OAAOyB,GAAG,CAACzB,KAAJ,CAAUiB,SAAV,CAAoBc,IAAI,CAACC,MAAL,CAAYN,EAAhC,CAAP,KAA+C,WAA/C,GACID,GAAG,CAACzB,KAAJ,CAAUiB,SAAV,CAAoBc,IAAI,CAACC,MAAL,CAAYN,EAAhC,CADJ,GAEIrB,wBAAwB,CAACoB,GAAG,CAACX,QAAL,CAH9B;;AAKAiB,MAAAA,IAAI,CAACJ,QAAL,GAAgBC,OAAO,IAAI;AACzB,eAAOzB,QAAQ,CAACb,YAAT,CAAsBmC,GAAG,CAACC,EAA1B,EAA8BK,IAAI,CAACC,MAAL,CAAYN,EAA1C,EAA8CE,OAA9C,CAAP;AACD,OAFD;AAGD,KAbD;AAcD;AACF","sourcesContent":["import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}