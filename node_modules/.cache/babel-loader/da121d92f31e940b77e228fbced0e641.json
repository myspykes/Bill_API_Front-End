{"ast":null,"code":"export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps);\n  hooks.getRowProps.push(getRowStyles);\n  hooks.getHeaderGroupProps.push(getRowStyles);\n  hooks.getFooterGroupProps.push(getRowStyles);\n  hooks.getHeaderProps.push(getHeaderProps);\n  hooks.getCellProps.push(getCellProps);\n  hooks.getFooterProps.push(getFooterProps);\n}\nuseFlexLayout.pluginName = 'useFlexLayout';\n\nconst getTableProps = (props, {\n  instance\n}) => [props, {\n  style: {\n    minWidth: `${instance.totalColumnsWidth}px`\n  }\n}];\n\nconst getRowStyles = (props, {\n  instance\n}) => [props, {\n  style: {\n    display: 'flex',\n    flex: '1 0 auto',\n    minWidth: `${instance.totalColumnsMinWidth}px`\n  }\n}];\n\nconst getHeaderProps = (props, {\n  column\n}) => [props, {\n  style: {\n    boxSizing: 'border-box',\n    flex: column.totalFlexWidth ? `${column.totalFlexWidth} 0 auto` : undefined,\n    minWidth: `${column.totalMinWidth}px`,\n    width: `${column.totalWidth}px`\n  }\n}];\n\nconst getCellProps = (props, {\n  cell\n}) => [props, {\n  style: {\n    boxSizing: 'border-box',\n    flex: `${cell.column.totalFlexWidth} 0 auto`,\n    minWidth: `${cell.column.totalMinWidth}px`,\n    width: `${cell.column.totalWidth}px`\n  }\n}];\n\nconst getFooterProps = (props, {\n  column\n}) => [props, {\n  style: {\n    boxSizing: 'border-box',\n    flex: column.totalFlexWidth ? `${column.totalFlexWidth} 0 auto` : undefined,\n    minWidth: `${column.totalMinWidth}px`,\n    width: `${column.totalWidth}px`\n  }\n}];","map":{"version":3,"sources":["/Users/ankomah/Desktop/AFI_CONNECT/front_end/node_modules/react-table/src/plugin-hooks/useFlexLayout.js"],"names":["useFlexLayout","hooks","getTableProps","push","getRowProps","getRowStyles","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getCellProps","getFooterProps","pluginName","props","instance","style","minWidth","totalColumnsWidth","display","flex","totalColumnsMinWidth","column","boxSizing","totalFlexWidth","undefined","totalMinWidth","width","totalWidth","cell"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACnCA,EAAAA,KAAK,CAACC,aAAN,CAAoBC,IAApB,CAAyBD,aAAzB;AACAD,EAAAA,KAAK,CAACG,WAAN,CAAkBD,IAAlB,CAAuBE,YAAvB;AACAJ,EAAAA,KAAK,CAACK,mBAAN,CAA0BH,IAA1B,CAA+BE,YAA/B;AACAJ,EAAAA,KAAK,CAACM,mBAAN,CAA0BJ,IAA1B,CAA+BE,YAA/B;AACAJ,EAAAA,KAAK,CAACO,cAAN,CAAqBL,IAArB,CAA0BK,cAA1B;AACAP,EAAAA,KAAK,CAACQ,YAAN,CAAmBN,IAAnB,CAAwBM,YAAxB;AACAR,EAAAA,KAAK,CAACS,cAAN,CAAqBP,IAArB,CAA0BO,cAA1B;AACD;AAEDV,aAAa,CAACW,UAAd,GAA2B,eAA3B;;AAEA,MAAMT,aAAa,GAAG,CAACU,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAyB,CAC7CD,KAD6C,EAE7C;AACEE,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAG,GAAEF,QAAQ,CAACG,iBAAkB;AADnC;AADT,CAF6C,CAA/C;;AASA,MAAMX,YAAY,GAAG,CAACO,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAyB,CAC5CD,KAD4C,EAE5C;AACEE,EAAAA,KAAK,EAAE;AACLG,IAAAA,OAAO,EAAE,MADJ;AAELC,IAAAA,IAAI,EAAE,UAFD;AAGLH,IAAAA,QAAQ,EAAG,GAAEF,QAAQ,CAACM,oBAAqB;AAHtC;AADT,CAF4C,CAA9C;;AAWA,MAAMX,cAAc,GAAG,CAACI,KAAD,EAAQ;AAAEQ,EAAAA;AAAF,CAAR,KAAuB,CAC5CR,KAD4C,EAE5C;AACEE,EAAAA,KAAK,EAAE;AACLO,IAAAA,SAAS,EAAE,YADN;AAELH,IAAAA,IAAI,EAAEE,MAAM,CAACE,cAAP,GACD,GAAEF,MAAM,CAACE,cAAe,SADvB,GAEFC,SAJC;AAKLR,IAAAA,QAAQ,EAAG,GAAEK,MAAM,CAACI,aAAc,IAL7B;AAMLC,IAAAA,KAAK,EAAG,GAAEL,MAAM,CAACM,UAAW;AANvB;AADT,CAF4C,CAA9C;;AAcA,MAAMjB,YAAY,GAAG,CAACG,KAAD,EAAQ;AAAEe,EAAAA;AAAF,CAAR,KAAqB,CACxCf,KADwC,EAExC;AACEE,EAAAA,KAAK,EAAE;AACLO,IAAAA,SAAS,EAAE,YADN;AAELH,IAAAA,IAAI,EAAG,GAAES,IAAI,CAACP,MAAL,CAAYE,cAAe,SAF/B;AAGLP,IAAAA,QAAQ,EAAG,GAAEY,IAAI,CAACP,MAAL,CAAYI,aAAc,IAHlC;AAILC,IAAAA,KAAK,EAAG,GAAEE,IAAI,CAACP,MAAL,CAAYM,UAAW;AAJ5B;AADT,CAFwC,CAA1C;;AAYA,MAAMhB,cAAc,GAAG,CAACE,KAAD,EAAQ;AAAEQ,EAAAA;AAAF,CAAR,KAAuB,CAC5CR,KAD4C,EAE5C;AACEE,EAAAA,KAAK,EAAE;AACLO,IAAAA,SAAS,EAAE,YADN;AAELH,IAAAA,IAAI,EAAEE,MAAM,CAACE,cAAP,GACD,GAAEF,MAAM,CAACE,cAAe,SADvB,GAEFC,SAJC;AAKLR,IAAAA,QAAQ,EAAG,GAAEK,MAAM,CAACI,aAAc,IAL7B;AAMLC,IAAAA,KAAK,EAAG,GAAEL,MAAM,CAACM,UAAW;AANvB;AADT,CAF4C,CAA9C","sourcesContent":["export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n"]},"metadata":{},"sourceType":"module"}